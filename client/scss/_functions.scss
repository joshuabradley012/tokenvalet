@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:math";
@use "sass:string";

@function varify($list) {
  $result: null;
  @each $entry in $list {
    $result: list.append($result, var(--#{$variable-prefix}#{$entry}), space);
  }
  @return $result;
}

@function map-loop($map, $func, $args...) {
  $_map: ();

  @each $key, $value in $map {
    // allow to pass the $key and $value of the map as an function argument
    $_args: ();
    @each $arg in $args {
      $_args: list.append($_args, if($arg == "$key", $key, if($arg == "$value", $value, $arg)));
    }

    $_map: map.merge($_map, ($key: meta.call(meta.get-function($func), $_args...)));
  }

  @return $_map;
}

@function map-get-multiple($map, $values) {
  $result: ();
  @each $key, $value in $map {
    @if (list.index($values, $key) != null) {
      $result: map.merge($result, ($key: $value));
    }
  }
  @return $result;
}

@function map-merge-multiple($maps...) {
  $merged-maps: ();

  @each $map in $maps {
    $merged-maps: map.merge($merged-maps, $map);
  }
  @return $merged-maps;
}

@function negativify-map($map) {
  $result: ();
  @each $key, $value in $map {
    @if $key != 0 {
      $result: map.merge($result, ("n" + $key: (-$value)));
    }
  }
  @return $result;
}

@function to-rgb($value) {
  @return color.red($value), color.green($value), color.blue($value);
}

@function rgba-css-var($identifier, $target) {
  @if $identifier == "body" and $target == "bg" {
    @return rgba(var(--#{$variable-prefix}#{$identifier}-bg-rgb), var(--#{$variable-prefix}#{$target}-opacity));
  } @if $identifier == "body" and $target == "text" {
    @return rgba(var(--#{$variable-prefix}#{$identifier}-color-rgb), var(--#{$variable-prefix}#{$target}-opacity));
  } @else {
    @return rgba(var(--#{$variable-prefix}#{$identifier}-rgb), var(--#{$variable-prefix}#{$target}-opacity));
  }
}

@function opaque($background, $foreground) {
  @return color.mix(rgba($foreground, 1), $background, color.opacity($foreground) * 100);
}

@function tint-color($color, $weight) {
  @return color.mix(white, $color, $weight);
}

@function shade-color($color, $weight) {
  @return color.mix(black, $color, $weight);
}

@function shift-color($color, $weight) {
  @return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
}

@function add($value1, $value2, $return-calc: true) {
  @if $value1 == null {
    @return $value2;
  }

  @if $value2 == null {
    @return $value1;
  }

  @if meta.type-of($value1) == number and meta.type-of($value2) == number and math.comparable($value1, $value2) {
    @return $value1 + $value2;
  }

  @return if($return-calc == true, calc(#{$value1} + #{$value2}), $value1 + string.unquote(" + ") + $value2);
}

@function subtract($value1, $value2, $return-calc: true) {
  @if $value1 == null and $value2 == null {
    @return null;
  }

  @if $value1 == null {
    @return -$value2;
  }

  @if $value2 == null {
    @return $value1;
  }

  @if meta.type-of($value1) == number and meta.type-of($value2) == number and math.comparable($value1, $value2) {
    @return $value1 - $value2;
  }

  @if meta.type-of($value2) != number {
    $value2: string.unquote("(") + $value2 + string.unquote(")");
  }

  @return if($return-calc == true, calc(#{$value1} - #{$value2}), $value1 + string.unquote(" - ") + $value2);
}

@function divide($dividend, $divisor, $precision: 10) {
  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
  $dividend: math.abs($dividend);
  $divisor: math.abs($divisor);
  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error "Cannot divide by 0";
  }
  $remainder: $dividend;
  $result: 0;
  $factor: 10;
  @while ($remainder > 0 and $precision >= 0) {
    $quotient: 0;
    @while ($remainder >= $divisor) {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }
    $result: $result * 10 + $quotient;
    $factor: $factor * .1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;
    @if ($precision < 0 and $remainder >= $divisor * 5) {
      $result: $result + 1;
    }
  }
  $result: $result * $factor * $sign;
  $dividend-unit: math.unit($dividend);
  $divisor-unit: math.unit($divisor);
  $unit-map: (
    "px": 1px,
    "rem": 1rem,
    "em": 1em,
    "%": 1%
  );
  @if ($dividend-unit != $divisor-unit and map.has-key($unit-map, $dividend-unit)) {
    $result: $result * map.get($unit-map, $dividend-unit);
  }
  @return $result;
}

